:toc: macro
toc::[]
:idprefix:
:idseparator: -

= OpenTelemetry in devon4j

OpenTelemetry forms the combination of openTracing and openCensus collecting different telemetry data (metrics, logs, traces) for understanding the applications behavior and performance. The observability and monitoring of applications is especially in microservices a very important topic for tracking i.e. service bottlenecks or the reason for bugs and other issues. Because of the standardization for processing telemetry data openTelemetry acts as a central collector for whole application landscapes monitoring data, which is able to communicate with replacable backends without changing configurations in the applications code.

== Architecture
image::images/openTelemetry_architecture.svg[]
The above example shows a reference architecture of multiple hosts (environments/applications) with separate agents.
[start=1]
. Traces and logs are automatically collected at each JAX-RS service. Other additionally defined metrics, traces or logs are also collected.
. These applications send data directly to a collector configured to use fewer resources, aka the agent.
. The agent then forwards the data to a collector that receives data from multiple agents. Collectors on this layer typically are allowed to use more resources and queue more data.
. The Collector then sends the data to the appropriate backend, in the solution provided by devon4j Jaeger, Zipkin, #and Victoria + Logging w/ SLF4j needs investigation#. The Victoria backend serves metrics while Jaeger and Zipkin are two alternatives for tracing.
. Additionally all the telemetry data can be visualized in a tool like Grafana.

== Components
* https://github.com/open-telemetry/opentelemetry-collector[*OpenTelemetry Collector*]
* https://www.jaegertracing.io/[*Jaeger*]
* https://zipkin.io/[*Zipkin*]
* https://github.com/VictoriaMetrics/VictoriaMetrics[*VictoriaMetrics*]
* https://grafana.com/[*Grafana*]

== Configuration
The Configuration provided is based on one single agent. Pipelines are set up consisting of reveivers, processors and exporters in the collector/agent config file. A reveiver transfers the telemetry data into the collector, which then can be processed on a processor. Finally, an exporter can send the data to a corresponding backend/destination. Further information can be found https://opentelemetry.io/docs/collector/configuration/[*here*]

Additionally there are 3 extensions (https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension/README.md[*Health Check, Performance Profiler, zPages*]) provided that can be added to the collector. These do not need direct access to telemetry data and enable additional functionalities outside the usual pipeline.